/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OncallOutgoingWebhookObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallOutgoingWebhookParameters struct {

	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	// +kubebuilder:validation:Optional
	AuthorizationHeader *string `json:"authorizationHeader,omitempty" tf:"authorization_header,omitempty"`

	// The data of the webhook.
	// +kubebuilder:validation:Optional
	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	// Forwards whole payload of the alert to the webhook's url as POST data.
	// +kubebuilder:validation:Optional
	ForwardWholePayload *bool `json:"forwardWholePayload,omitempty" tf:"forward_whole_payload,omitempty"`

	// The name of the outgoing webhook.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The auth data of the webhook. Used for Basic authentication
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana_oncall_team` datasource.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// The webhook URL.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The auth data of the webhook. Used for Basic authentication.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// OncallOutgoingWebhookSpec defines the desired state of OncallOutgoingWebhook
type OncallOutgoingWebhookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OncallOutgoingWebhookParameters `json:"forProvider"`
}

// OncallOutgoingWebhookStatus defines the observed state of OncallOutgoingWebhook.
type OncallOutgoingWebhookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OncallOutgoingWebhookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OncallOutgoingWebhook is the Schema for the OncallOutgoingWebhooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type OncallOutgoingWebhook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OncallOutgoingWebhookSpec   `json:"spec"`
	Status            OncallOutgoingWebhookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OncallOutgoingWebhookList contains a list of OncallOutgoingWebhooks
type OncallOutgoingWebhookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OncallOutgoingWebhook `json:"items"`
}

// Repository type metadata.
var (
	OncallOutgoingWebhook_Kind             = "OncallOutgoingWebhook"
	OncallOutgoingWebhook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OncallOutgoingWebhook_Kind}.String()
	OncallOutgoingWebhook_KindAPIVersion   = OncallOutgoingWebhook_Kind + "." + CRDGroupVersion.String()
	OncallOutgoingWebhook_GroupVersionKind = CRDGroupVersion.WithKind(OncallOutgoingWebhook_Kind)
)

func init() {
	SchemeBuilder.Register(&OncallOutgoingWebhook{}, &OncallOutgoingWebhookList{})
}
