/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OncallScheduleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallScheduleParameters struct {

	// The URL of external iCal calendar which override primary events.
	// +kubebuilder:validation:Optional
	IcalURLOverrides *string `json:"icalUrlOverrides,omitempty" tf:"ical_url_overrides,omitempty"`

	// The URL of the external calendar iCal file.
	// +kubebuilder:validation:Optional
	IcalURLPrimary *string `json:"icalUrlPrimary,omitempty" tf:"ical_url_primary,omitempty"`

	// The schedule's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The list of ID's of on-call shifts.
	// +kubebuilder:validation:Optional
	Shifts []*string `json:"shifts,omitempty" tf:"shifts,omitempty"`

	// The Slack-specific settings for a schedule.
	// +kubebuilder:validation:Optional
	Slack []OncallScheduleSlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana_oncall_team` datasource.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// The schedule's time zone.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The schedule's type.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type OncallScheduleSlackObservation struct {
}

type OncallScheduleSlackParameters struct {

	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Slack user group id. Members of user group will be updated when on-call users change.
	// +kubebuilder:validation:Optional
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`
}

// OncallScheduleSpec defines the desired state of OncallSchedule
type OncallScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OncallScheduleParameters `json:"forProvider"`
}

// OncallScheduleStatus defines the observed state of OncallSchedule.
type OncallScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OncallScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OncallSchedule is the Schema for the OncallSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type OncallSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OncallScheduleSpec   `json:"spec"`
	Status            OncallScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OncallScheduleList contains a list of OncallSchedules
type OncallScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OncallSchedule `json:"items"`
}

// Repository type metadata.
var (
	OncallSchedule_Kind             = "OncallSchedule"
	OncallSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OncallSchedule_Kind}.String()
	OncallSchedule_KindAPIVersion   = OncallSchedule_Kind + "." + CRDGroupVersion.String()
	OncallSchedule_GroupVersionKind = CRDGroupVersion.WithKind(OncallSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&OncallSchedule{}, &OncallScheduleList{})
}
