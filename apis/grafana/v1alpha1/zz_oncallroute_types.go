/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OncallRouteMsteamsObservation struct {
}

type OncallRouteMsteamsParameters struct {

	// Enable notification in MS teams. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallRouteObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallRouteParameters struct {

	// The ID of the escalation chain.
	// +kubebuilder:validation:Required
	EscalationChainID *string `json:"escalationChainId" tf:"escalation_chain_id,omitempty"`

	// The ID of the integration.
	// +kubebuilder:validation:Required
	IntegrationID *string `json:"integrationId" tf:"integration_id,omitempty"`

	// MS teams-specific settings for a route.
	// +kubebuilder:validation:Optional
	Msteams []OncallRouteMsteamsParameters `json:"msteams,omitempty" tf:"msteams,omitempty"`

	// The position of the route (starts from 0).
	// +kubebuilder:validation:Required
	Position *float64 `json:"position" tf:"position,omitempty"`

	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	// +kubebuilder:validation:Required
	RoutingRegex *string `json:"routingRegex" tf:"routing_regex,omitempty"`

	// Slack-specific settings for a route.
	// +kubebuilder:validation:Optional
	Slack []OncallRouteSlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// Telegram-specific settings for a route.
	// +kubebuilder:validation:Optional
	Telegram []OncallRouteTelegramParameters `json:"telegram,omitempty" tf:"telegram,omitempty"`
}

type OncallRouteSlackObservation struct {
}

type OncallRouteSlackParameters struct {

	// Slack channel id. Alerts will be directed to this channel in Slack.
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Enable notification in Slack. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type OncallRouteTelegramObservation struct {
}

type OncallRouteTelegramParameters struct {

	// Enable notification in Telegram. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

// OncallRouteSpec defines the desired state of OncallRoute
type OncallRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OncallRouteParameters `json:"forProvider"`
}

// OncallRouteStatus defines the observed state of OncallRoute.
type OncallRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OncallRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OncallRoute is the Schema for the OncallRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type OncallRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OncallRouteSpec   `json:"spec"`
	Status            OncallRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OncallRouteList contains a list of OncallRoutes
type OncallRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OncallRoute `json:"items"`
}

// Repository type metadata.
var (
	OncallRoute_Kind             = "OncallRoute"
	OncallRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OncallRoute_Kind}.String()
	OncallRoute_KindAPIVersion   = OncallRoute_Kind + "." + CRDGroupVersion.String()
	OncallRoute_GroupVersionKind = CRDGroupVersion.WithKind(OncallRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&OncallRoute{}, &OncallRouteList{})
}
