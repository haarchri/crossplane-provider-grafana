/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MessageTemplateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MessageTemplateParameters struct {

	// The name of the message template.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The content of the message template.
	// +kubebuilder:validation:Required
	Template *string `json:"template" tf:"template,omitempty"`
}

// MessageTemplateSpec defines the desired state of MessageTemplate
type MessageTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MessageTemplateParameters `json:"forProvider"`
}

// MessageTemplateStatus defines the observed state of MessageTemplate.
type MessageTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MessageTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MessageTemplate is the Schema for the MessageTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type MessageTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MessageTemplateSpec   `json:"spec"`
	Status            MessageTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MessageTemplateList contains a list of MessageTemplates
type MessageTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MessageTemplate `json:"items"`
}

// Repository type metadata.
var (
	MessageTemplate_Kind             = "MessageTemplate"
	MessageTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MessageTemplate_Kind}.String()
	MessageTemplate_KindAPIVersion   = MessageTemplate_Kind + "." + CRDGroupVersion.String()
	MessageTemplate_GroupVersionKind = CRDGroupVersion.WithKind(MessageTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&MessageTemplate{}, &MessageTemplateList{})
}
