/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountTokenObservation struct {
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	HasExpired *bool `json:"hasExpired,omitempty" tf:"has_expired,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceAccountTokenParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SecondsToLive *float64 `json:"secondsToLive,omitempty" tf:"seconds_to_live,omitempty"`

	// +kubebuilder:validation:Required
	ServiceAccountID *float64 `json:"serviceAccountId" tf:"service_account_id,omitempty"`
}

// ServiceAccountTokenSpec defines the desired state of ServiceAccountToken
type ServiceAccountTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountTokenParameters `json:"forProvider"`
}

// ServiceAccountTokenStatus defines the observed state of ServiceAccountToken.
type ServiceAccountTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountToken is the Schema for the ServiceAccountTokens API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type ServiceAccountToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceAccountTokenSpec   `json:"spec"`
	Status            ServiceAccountTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountTokenList contains a list of ServiceAccountTokens
type ServiceAccountTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccountToken `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccountToken_Kind             = "ServiceAccountToken"
	ServiceAccountToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccountToken_Kind}.String()
	ServiceAccountToken_KindAPIVersion   = ServiceAccountToken_Kind + "." + CRDGroupVersion.String()
	ServiceAccountToken_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccountToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccountToken{}, &ServiceAccountTokenList{})
}
