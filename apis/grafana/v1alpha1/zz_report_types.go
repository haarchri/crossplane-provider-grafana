/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReportParameters struct {

	// Dashboard to be sent in the report.
	// +kubebuilder:validation:Required
	DashboardID *float64 `json:"dashboardId" tf:"dashboard_id,omitempty"`

	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	// +kubebuilder:validation:Optional
	IncludeDashboardLink *bool `json:"includeDashboardLink,omitempty" tf:"include_dashboard_link,omitempty"`

	// Whether to include a CSV file of table panel data. Defaults to `false`.
	// +kubebuilder:validation:Optional
	IncludeTableCsv *bool `json:"includeTableCsv,omitempty" tf:"include_table_csv,omitempty"`

	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	// +kubebuilder:validation:Optional
	Layout *string `json:"layout,omitempty" tf:"layout,omitempty"`

	// Message to be sent in the report.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of the report.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	// +kubebuilder:validation:Optional
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// List of recipients of the report.
	// +kubebuilder:validation:Required
	Recipients []*string `json:"recipients" tf:"recipients,omitempty"`

	// Reply-to email address of the report.
	// +kubebuilder:validation:Optional
	ReplyTo *string `json:"replyTo,omitempty" tf:"reply_to,omitempty"`

	// Schedule of the report.
	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule,omitempty"`

	// Time range of the report.
	// +kubebuilder:validation:Optional
	TimeRange []TimeRangeParameters `json:"timeRange,omitempty" tf:"time_range,omitempty"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	// +kubebuilder:validation:Optional
	CustomInterval *string `json:"customInterval,omitempty" tf:"custom_interval,omitempty"`

	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	// +kubebuilder:validation:Required
	Frequency *string `json:"frequency" tf:"frequency,omitempty"`

	// Send the report on the last day of the month Defaults to `false`.
	// +kubebuilder:validation:Optional
	LastDayOfMonth *bool `json:"lastDayOfMonth,omitempty" tf:"last_day_of_month,omitempty"`

	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// Whether to send the report only on work days. Defaults to `false`.
	// +kubebuilder:validation:Optional
	WorkdaysOnly *bool `json:"workdaysOnly,omitempty" tf:"workdays_only,omitempty"`
}

type TimeRangeObservation struct {
}

type TimeRangeParameters struct {

	// Start of the time range.
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// End of the time range.
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

// ReportSpec defines the desired state of Report
type ReportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReportParameters `json:"forProvider"`
}

// ReportStatus defines the observed state of Report.
type ReportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Report is the Schema for the Reports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type Report struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReportSpec   `json:"spec"`
	Status            ReportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReportList contains a list of Reports
type ReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Report `json:"items"`
}

// Repository type metadata.
var (
	Report_Kind             = "Report"
	Report_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Report_Kind}.String()
	Report_KindAPIVersion   = Report_Kind + "." + CRDGroupVersion.String()
	Report_GroupVersionKind = CRDGroupVersion.WithKind(Report_Kind)
)

func init() {
	SchemeBuilder.Register(&Report{}, &ReportList{})
}
