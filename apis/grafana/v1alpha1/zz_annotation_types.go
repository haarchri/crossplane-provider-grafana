/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnnotationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AnnotationParameters struct {

	// The ID of the dashboard on which to create the annotation.
	// +kubebuilder:validation:Optional
	DashboardID *float64 `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// The ID of the dashboard panel on which to create the annotation.
	// +kubebuilder:validation:Optional
	PanelID *float64 `json:"panelId,omitempty" tf:"panel_id,omitempty"`

	// The tags to associate with the annotation.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The text to associate with the annotation.
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// The RFC 3339-formatted time string indicating the annotation's time.
	// +kubebuilder:validation:Optional
	Time *string `json:"time,omitempty" tf:"time,omitempty"`

	// The RFC 3339-formatted time string indicating the annotation's end time.
	// +kubebuilder:validation:Optional
	TimeEnd *string `json:"timeEnd,omitempty" tf:"time_end,omitempty"`
}

// AnnotationSpec defines the desired state of Annotation
type AnnotationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AnnotationParameters `json:"forProvider"`
}

// AnnotationStatus defines the observed state of Annotation.
type AnnotationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AnnotationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Annotation is the Schema for the Annotations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type Annotation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnnotationSpec   `json:"spec"`
	Status            AnnotationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnnotationList contains a list of Annotations
type AnnotationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Annotation `json:"items"`
}

// Repository type metadata.
var (
	Annotation_Kind             = "Annotation"
	Annotation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Annotation_Kind}.String()
	Annotation_KindAPIVersion   = Annotation_Kind + "." + CRDGroupVersion.String()
	Annotation_GroupVersionKind = CRDGroupVersion.WithKind(Annotation_Kind)
)

func init() {
	SchemeBuilder.Register(&Annotation{}, &AnnotationList{})
}
