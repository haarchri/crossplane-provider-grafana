/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudStackObservation struct {
	AlertmanagerName *string `json:"alertmanagerName,omitempty" tf:"alertmanager_name,omitempty"`

	AlertmanagerStatus *string `json:"alertmanagerStatus,omitempty" tf:"alertmanager_status,omitempty"`

	AlertmanagerURL *string `json:"alertmanagerUrl,omitempty" tf:"alertmanager_url,omitempty"`

	AlertmanagerUserID *float64 `json:"alertmanagerUserId,omitempty" tf:"alertmanager_user_id,omitempty"`

	GraphiteName *string `json:"graphiteName,omitempty" tf:"graphite_name,omitempty"`

	GraphiteStatus *string `json:"graphiteStatus,omitempty" tf:"graphite_status,omitempty"`

	GraphiteURL *string `json:"graphiteUrl,omitempty" tf:"graphite_url,omitempty"`

	GraphiteUserID *float64 `json:"graphiteUserId,omitempty" tf:"graphite_user_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LogsName *string `json:"logsName,omitempty" tf:"logs_name,omitempty"`

	LogsStatus *string `json:"logsStatus,omitempty" tf:"logs_status,omitempty"`

	LogsURL *string `json:"logsUrl,omitempty" tf:"logs_url,omitempty"`

	LogsUserID *float64 `json:"logsUserId,omitempty" tf:"logs_user_id,omitempty"`

	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	OrgSlug *string `json:"orgSlug,omitempty" tf:"org_slug,omitempty"`

	PrometheusName *string `json:"prometheusName,omitempty" tf:"prometheus_name,omitempty"`

	PrometheusRemoteEndpoint *string `json:"prometheusRemoteEndpoint,omitempty" tf:"prometheus_remote_endpoint,omitempty"`

	PrometheusRemoteWriteEndpoint *string `json:"prometheusRemoteWriteEndpoint,omitempty" tf:"prometheus_remote_write_endpoint,omitempty"`

	PrometheusStatus *string `json:"prometheusStatus,omitempty" tf:"prometheus_status,omitempty"`

	PrometheusURL *string `json:"prometheusUrl,omitempty" tf:"prometheus_url,omitempty"`

	PrometheusUserID *float64 `json:"prometheusUserId,omitempty" tf:"prometheus_user_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TracesName *string `json:"tracesName,omitempty" tf:"traces_name,omitempty"`

	TracesStatus *string `json:"tracesStatus,omitempty" tf:"traces_status,omitempty"`

	TracesURL *string `json:"tracesUrl,omitempty" tf:"traces_url,omitempty"`

	TracesUserID *float64 `json:"tracesUserId,omitempty" tf:"traces_user_id,omitempty"`
}

type CloudStackParameters struct {

	// Description of stack.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of stack. Conventionally matches the url of the instance (e.g. “<stack_slug>.grafana.net”).
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region slug to assign to this stack.
	// Changing region will destroy the existing stack and create a new one in the desired region
	// +kubebuilder:validation:Optional
	RegionSlug *string `json:"regionSlug,omitempty" tf:"region_slug,omitempty"`

	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “<stack_slug>” will make the instance
	// available at “https://<stack_slug>.grafana.net".
	// +kubebuilder:validation:Required
	Slug *string `json:"slug" tf:"slug,omitempty"`

	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	// +kubebuilder:validation:Optional
	WaitForReadiness *bool `json:"waitForReadiness,omitempty" tf:"wait_for_readiness,omitempty"`

	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	// +kubebuilder:validation:Optional
	WaitForReadinessTimeout *string `json:"waitForReadinessTimeout,omitempty" tf:"wait_for_readiness_timeout,omitempty"`
}

// CloudStackSpec defines the desired state of CloudStack
type CloudStackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudStackParameters `json:"forProvider"`
}

// CloudStackStatus defines the observed state of CloudStack.
type CloudStackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudStackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudStack is the Schema for the CloudStacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type CloudStack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudStackSpec   `json:"spec"`
	Status            CloudStackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudStackList contains a list of CloudStacks
type CloudStackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudStack `json:"items"`
}

// Repository type metadata.
var (
	CloudStack_Kind             = "CloudStack"
	CloudStack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudStack_Kind}.String()
	CloudStack_KindAPIVersion   = CloudStack_Kind + "." + CRDGroupVersion.String()
	CloudStack_GroupVersionKind = CRDGroupVersion.WithKind(CloudStack_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudStack{}, &CloudStackList{})
}
