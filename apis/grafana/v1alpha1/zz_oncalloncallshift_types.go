/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OncallOnCallShiftObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallOnCallShiftParameters struct {

	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	// +kubebuilder:validation:Optional
	ByDay []*string `json:"byDay,omitempty" tf:"by_day,omitempty"`

	// This parameter takes a list of months. Valid values are 1 to 12
	// +kubebuilder:validation:Optional
	ByMonth []*float64 `json:"byMonth,omitempty" tf:"by_month,omitempty"`

	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	// +kubebuilder:validation:Optional
	ByMonthday []*float64 `json:"byMonthday,omitempty" tf:"by_monthday,omitempty"`

	// The duration of the event.
	// +kubebuilder:validation:Required
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// The frequency of the event. Can be daily, weekly, monthly
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// The positive integer representing at which intervals the recurrence rule repeats.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The priority level. The higher the value, the higher the priority.
	// +kubebuilder:validation:Optional
	Level *float64 `json:"level,omitempty" tf:"level,omitempty"`

	// The shift's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The list of lists with on-call users (for rolling_users event type)
	// +kubebuilder:validation:Optional
	RollingUsers [][]*string `json:"rollingUsers,omitempty" tf:"rolling_users,omitempty"`

	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`

	// The index of the list of users in rolling_users, from which on-call rotation starts.
	// +kubebuilder:validation:Optional
	StartRotationFromUserIndex *float64 `json:"startRotationFromUserIndex,omitempty" tf:"start_rotation_from_user_index,omitempty"`

	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana_oncall_team` datasource.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// The shift's timezone.  Overrides schedule's timezone.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The shift's type. Can be rolling_users, recurrent_event, single_event
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The list of on-call users (for single_event and recurrent_event event type).
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`

	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	// +kubebuilder:validation:Optional
	WeekStart *string `json:"weekStart,omitempty" tf:"week_start,omitempty"`
}

// OncallOnCallShiftSpec defines the desired state of OncallOnCallShift
type OncallOnCallShiftSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OncallOnCallShiftParameters `json:"forProvider"`
}

// OncallOnCallShiftStatus defines the observed state of OncallOnCallShift.
type OncallOnCallShiftStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OncallOnCallShiftObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OncallOnCallShift is the Schema for the OncallOnCallShifts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type OncallOnCallShift struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OncallOnCallShiftSpec   `json:"spec"`
	Status            OncallOnCallShiftStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OncallOnCallShiftList contains a list of OncallOnCallShifts
type OncallOnCallShiftList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OncallOnCallShift `json:"items"`
}

// Repository type metadata.
var (
	OncallOnCallShift_Kind             = "OncallOnCallShift"
	OncallOnCallShift_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OncallOnCallShift_Kind}.String()
	OncallOnCallShift_KindAPIVersion   = OncallOnCallShift_Kind + "." + CRDGroupVersion.String()
	OncallOnCallShift_GroupVersionKind = CRDGroupVersion.WithKind(OncallOnCallShift_Kind)
)

func init() {
	SchemeBuilder.Register(&OncallOnCallShift{}, &OncallOnCallShiftList{})
}
