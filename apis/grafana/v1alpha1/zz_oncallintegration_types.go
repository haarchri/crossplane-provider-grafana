/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultRouteObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DefaultRouteParameters struct {

	// The ID of the escalation chain.
	// +kubebuilder:validation:Optional
	EscalationChainID *string `json:"escalationChainId,omitempty" tf:"escalation_chain_id,omitempty"`

	// MS teams-specific settings for a route.
	// +kubebuilder:validation:Optional
	Msteams []MsteamsParameters `json:"msteams,omitempty" tf:"msteams,omitempty"`

	// Slack-specific settings for a route.
	// +kubebuilder:validation:Optional
	Slack []DefaultRouteSlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// Telegram-specific settings for a route.
	// +kubebuilder:validation:Optional
	Telegram []DefaultRouteTelegramParameters `json:"telegram,omitempty" tf:"telegram,omitempty"`
}

type DefaultRouteSlackObservation struct {
}

type DefaultRouteSlackParameters struct {

	// Slack channel id. Alerts will be directed to this channel in Slack.
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Enable notification in Slack. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type DefaultRouteTelegramObservation struct {
}

type DefaultRouteTelegramParameters struct {

	// Enable notification in Telegram. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MsteamsObservation struct {
}

type MsteamsParameters struct {

	// Enable notification in MS teams. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OncallIntegrationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Link *string `json:"link,omitempty" tf:"link,omitempty"`
}

type OncallIntegrationParameters struct {

	// The Default route for all alerts from the given integration
	// +kubebuilder:validation:Required
	DefaultRoute []DefaultRouteParameters `json:"defaultRoute" tf:"default_route,omitempty"`

	// The name of the service integration.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana_oncall_team` datasource.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Jinja2 templates for Alert payload.
	// +kubebuilder:validation:Optional
	Templates []TemplatesParameters `json:"templates,omitempty" tf:"templates,omitempty"`

	// The type of integration. Can be grafana, grafana_alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon_sns, curler, sentry, formatted_webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry_platform, zabbix, prtg, slack_channel, inbound_email.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type TemplatesObservation struct {
}

type TemplatesParameters struct {

	// Template for the key by which alerts are grouped.
	// +kubebuilder:validation:Optional
	GroupingKey *string `json:"groupingKey,omitempty" tf:"grouping_key,omitempty"`

	// Template for sending a signal to resolve the Incident.
	// +kubebuilder:validation:Optional
	ResolveSignal *string `json:"resolveSignal,omitempty" tf:"resolve_signal,omitempty"`

	// Templates for Slack.
	// +kubebuilder:validation:Optional
	Slack []TemplatesSlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`
}

type TemplatesSlackObservation struct {
}

type TemplatesSlackParameters struct {

	// Template for Alert image url.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// Template for Alert message.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Template for Alert title.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// OncallIntegrationSpec defines the desired state of OncallIntegration
type OncallIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OncallIntegrationParameters `json:"forProvider"`
}

// OncallIntegrationStatus defines the observed state of OncallIntegration.
type OncallIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OncallIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OncallIntegration is the Schema for the OncallIntegrations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type OncallIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OncallIntegrationSpec   `json:"spec"`
	Status            OncallIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OncallIntegrationList contains a list of OncallIntegrations
type OncallIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OncallIntegration `json:"items"`
}

// Repository type metadata.
var (
	OncallIntegration_Kind             = "OncallIntegration"
	OncallIntegration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OncallIntegration_Kind}.String()
	OncallIntegration_KindAPIVersion   = OncallIntegration_Kind + "." + CRDGroupVersion.String()
	OncallIntegration_GroupVersionKind = CRDGroupVersion.WithKind(OncallIntegration_Kind)
)

func init() {
	SchemeBuilder.Register(&OncallIntegration{}, &OncallIntegrationList{})
}
