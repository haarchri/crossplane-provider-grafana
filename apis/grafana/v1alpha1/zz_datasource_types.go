/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSourceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataSourceParameters struct {

	// The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.
	// +kubebuilder:validation:Optional
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// Whether to enable basic auth for the data source. Defaults to `false`.
	// +kubebuilder:validation:Optional
	BasicAuthEnabled *bool `json:"basicAuthEnabled,omitempty" tf:"basic_auth_enabled,omitempty"`

	// Basic auth password. Deprecated:Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.
	// +kubebuilder:validation:Optional
	BasicAuthPasswordSecretRef *v1.SecretKeySelector `json:"basicAuthPasswordSecretRef,omitempty" tf:"-"`

	// Basic auth username. Defaults to ``.
	// +kubebuilder:validation:Optional
	BasicAuthUsername *string `json:"basicAuthUsername,omitempty" tf:"basic_auth_username,omitempty"`

	// (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Custom HTTP headers
	// +kubebuilder:validation:Optional
	HTTPHeadersSecretRef map[string]v1.SecretKeySelector `json:"httpHeadersSecretRef" tf:"-"`

	// Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (Required by some data source types). Deprecated: Use json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes.
	// +kubebuilder:validation:Optional
	JSONData []JSONDataParameters `json:"jsonData,omitempty" tf:"json_data,omitempty"`

	// Serialized JSON string containing the json data. Replaces the json_data attribute, this attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.
	// +kubebuilder:validation:Optional
	JSONDataEncoded *string `json:"jsonDataEncoded,omitempty" tf:"json_data_encoded,omitempty"`

	// A unique name for the data source.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Required by some data source types) The password to use to authenticate to the data source. Deprecated: Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Deprecated: Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes.
	// +kubebuilder:validation:Optional
	SecureJSONData []SecureJSONDataParameters `json:"secureJsonData,omitempty" tf:"secure_json_data,omitempty"`

	// Serialized JSON string containing the secure json data. Replaces the secure_json_data attribute, this attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.
	// +kubebuilder:validation:Optional
	SecureJSONDataEncodedSecretRef *v1.SecretKeySelector `json:"secureJsonDataEncodedSecretRef,omitempty" tf:"-"`

	// The data source type. Must be one of the supported data source keywords.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Unique identifier. If unset, this will be automatically generated.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The URL for the data source. The type of URL required varies depending on the chosen data source type.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DerivedFieldObservation struct {
}

type DerivedFieldParameters struct {

	// +kubebuilder:validation:Optional
	DatasourceUID *string `json:"datasourceUid,omitempty" tf:"datasource_uid,omitempty"`

	// +kubebuilder:validation:Optional
	MatcherRegex *string `json:"matcherRegex,omitempty" tf:"matcher_regex,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type JSONDataObservation struct {
}

type JSONDataParameters struct {

	// (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
	// +kubebuilder:validation:Optional
	AlertmanagerUID *string `json:"alertmanagerUid,omitempty" tf:"alertmanager_uid,omitempty"`

	// (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
	// +kubebuilder:validation:Optional
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty" tf:"assume_role_arn,omitempty"`

	// (CloudWatch, Athena) The authentication type used to access the data source.
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// (Stackdriver) The authentication type: `jwt` or `gce`.
	// +kubebuilder:validation:Optional
	AuthenticationType *string `json:"authenticationType,omitempty" tf:"authentication_type,omitempty"`

	// (Athena) Athena catalog.
	// +kubebuilder:validation:Optional
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// (Stackdriver) Service account email address.
	// +kubebuilder:validation:Optional
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// (Azure Monitor) The service account client id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (Azure Monitor) The cloud name.
	// +kubebuilder:validation:Optional
	CloudName *string `json:"cloudName,omitempty" tf:"cloud_name,omitempty"`

	// (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
	// +kubebuilder:validation:Optional
	ConnMaxLifetime *float64 `json:"connMaxLifetime,omitempty" tf:"conn_max_lifetime,omitempty"`

	// (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
	// +kubebuilder:validation:Optional
	CustomMetricsNamespaces *string `json:"customMetricsNamespaces,omitempty" tf:"custom_metrics_namespaces,omitempty"`

	// (Athena) Name of the database within the catalog.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (InfluxDB) The default bucket for the data source.
	// +kubebuilder:validation:Optional
	DefaultBucket *string `json:"defaultBucket,omitempty" tf:"default_bucket,omitempty"`

	// (Stackdriver) The default project for the data source.
	// +kubebuilder:validation:Optional
	DefaultProject *string `json:"defaultProject,omitempty" tf:"default_project,omitempty"`

	// (CloudWatch, Athena) The default region for the data source.
	// +kubebuilder:validation:Optional
	DefaultRegion *string `json:"defaultRegion,omitempty" tf:"default_region,omitempty"`

	// (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
	// +kubebuilder:validation:Optional
	DerivedField []DerivedFieldParameters `json:"derivedField,omitempty" tf:"derived_field,omitempty"`

	// (MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.
	// +kubebuilder:validation:Optional
	Encrypt *string `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
	// +kubebuilder:validation:Optional
	EsVersion *string `json:"esVersion,omitempty" tf:"es_version,omitempty"`

	// (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (Github) Github URL
	// +kubebuilder:validation:Optional
	GithubURL *string `json:"githubUrl,omitempty" tf:"github_url,omitempty"`

	// (Graphite) Graphite version.
	// +kubebuilder:validation:Optional
	GraphiteVersion *string `json:"graphiteVersion,omitempty" tf:"graphite_version,omitempty"`

	// (Prometheus) HTTP method to use for making requests.
	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// (Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'
	// +kubebuilder:validation:Optional
	Implementation *string `json:"implementation,omitempty" tf:"implementation,omitempty"`

	// (Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Elasticsearch) Which field should be used to indicate the priority of the log message.
	// +kubebuilder:validation:Optional
	LogLevelField *string `json:"logLevelField,omitempty" tf:"log_level_field,omitempty"`

	// (Elasticsearch) Which field should be used as the log message.
	// +kubebuilder:validation:Optional
	LogMessageField *string `json:"logMessageField,omitempty" tf:"log_message_field,omitempty"`

	// (Prometheus) Manage alerts.
	// +kubebuilder:validation:Optional
	ManageAlerts *bool `json:"manageAlerts,omitempty" tf:"manage_alerts,omitempty"`

	// (Elasticsearch) Maximum number of concurrent shard requests.
	// +kubebuilder:validation:Optional
	MaxConcurrentShardRequests *float64 `json:"maxConcurrentShardRequests,omitempty" tf:"max_concurrent_shard_requests,omitempty"`

	// (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
	// +kubebuilder:validation:Optional
	MaxIdleConns *float64 `json:"maxIdleConns,omitempty" tf:"max_idle_conns,omitempty"`

	// (Loki) Upper limit for the number of log lines returned by Loki
	// +kubebuilder:validation:Optional
	MaxLines *float64 `json:"maxLines,omitempty" tf:"max_lines,omitempty"`

	// (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
	// +kubebuilder:validation:Optional
	MaxOpenConns *float64 `json:"maxOpenConns,omitempty" tf:"max_open_conns,omitempty"`

	// (Sentry) Organization slug.
	// +kubebuilder:validation:Optional
	OrgSlug *string `json:"orgSlug,omitempty" tf:"org_slug,omitempty"`

	// (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
	// +kubebuilder:validation:Optional
	OutputLocation *string `json:"outputLocation,omitempty" tf:"output_location,omitempty"`

	// (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
	// +kubebuilder:validation:Optional
	PostgresVersion *float64 `json:"postgresVersion,omitempty" tf:"postgres_version,omitempty"`

	// (CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
	// +kubebuilder:validation:Optional
	QueryTimeout *string `json:"queryTimeout,omitempty" tf:"query_timeout,omitempty"`

	// (PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.
	// +kubebuilder:validation:Optional
	SSLMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`

	// (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
	// +kubebuilder:validation:Optional
	Sigv4AssumeRoleArn *string `json:"sigv4AssumeRoleArn,omitempty" tf:"sigv4_assume_role_arn,omitempty"`

	// (Elasticsearch and Prometheus) Enable usage of SigV4.
	// +kubebuilder:validation:Optional
	Sigv4Auth *bool `json:"sigv4Auth,omitempty" tf:"sigv4_auth,omitempty"`

	// (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').
	// +kubebuilder:validation:Optional
	Sigv4AuthType *string `json:"sigv4AuthType,omitempty" tf:"sigv4_auth_type,omitempty"`

	// (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
	// +kubebuilder:validation:Optional
	Sigv4ExternalID *string `json:"sigv4ExternalId,omitempty" tf:"sigv4_external_id,omitempty"`

	// (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
	// +kubebuilder:validation:Optional
	Sigv4Profile *string `json:"sigv4Profile,omitempty" tf:"sigv4_profile,omitempty"`

	// (Elasticsearch and Prometheus) AWS region to use for Sigv4.
	// +kubebuilder:validation:Optional
	Sigv4Region *string `json:"sigv4Region,omitempty" tf:"sigv4_region,omitempty"`

	// (Azure Monitor) The subscription id
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// (All) Enable TLS authentication using client cert configured in secure json data.
	// +kubebuilder:validation:Optional
	TLSAuth *bool `json:"tlsAuth,omitempty" tf:"tls_auth,omitempty"`

	// (All) Enable TLS authentication using CA cert.
	// +kubebuilder:validation:Optional
	TLSAuthWithCACert *bool `json:"tlsAuthWithCaCert,omitempty" tf:"tls_auth_with_ca_cert,omitempty"`

	// (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
	// +kubebuilder:validation:Optional
	TLSConfigurationMethod *string `json:"tlsConfigurationMethod,omitempty" tf:"tls_configuration_method,omitempty"`

	// (All) Controls whether a client verifies the server’s certificate chain and host name.
	// +kubebuilder:validation:Optional
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (Azure Monitor) Service account tenant ID.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Elasticsearch) Which field that should be used as timestamp.
	// +kubebuilder:validation:Optional
	TimeField *string `json:"timeField,omitempty" tf:"time_field,omitempty"`

	// (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called "Scrape Interval" in the Grafana UI.
	// +kubebuilder:validation:Optional
	TimeInterval *string `json:"timeInterval,omitempty" tf:"time_interval,omitempty"`

	// (PostgreSQL) Enable usage of TimescaleDB extension.
	// +kubebuilder:validation:Optional
	Timescaledb *bool `json:"timescaledb,omitempty" tf:"timescaledb,omitempty"`

	// (Stackdriver) The token URI used, provided in the service account key.
	// +kubebuilder:validation:Optional
	TokenURI *string `json:"tokenUri,omitempty" tf:"token_uri,omitempty"`

	// (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
	// +kubebuilder:validation:Optional
	TracingDatasourceUID *string `json:"tracingDatasourceUid,omitempty" tf:"tracing_datasource_uid,omitempty"`

	// (OpenTSDB) Resolution.
	// +kubebuilder:validation:Optional
	TsdbResolution *float64 `json:"tsdbResolution,omitempty" tf:"tsdb_resolution,omitempty"`

	// (OpenTSDB) Version.
	// +kubebuilder:validation:Optional
	TsdbVersion *float64 `json:"tsdbVersion,omitempty" tf:"tsdb_version,omitempty"`

	// (InfluxDB) InfluxQL or Flux.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Athena) Workgroup to use.
	// +kubebuilder:validation:Optional
	Workgroup *string `json:"workgroup,omitempty" tf:"workgroup,omitempty"`

	// (Elasticsearch) Enable X-Pack support.
	// +kubebuilder:validation:Optional
	XpackEnabled *bool `json:"xpackEnabled,omitempty" tf:"xpack_enabled,omitempty"`
}

type SecureJSONDataObservation struct {
}

type SecureJSONDataParameters struct {

	// (CloudWatch, Athena) The access key used to access the data source.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// (Github) The access token used to access the data source.
	// +kubebuilder:validation:Optional
	AccessTokenSecretRef *v1.SecretKeySelector `json:"accessTokenSecretRef,omitempty" tf:"-"`

	// (Sentry) Authorization token.
	// +kubebuilder:validation:Optional
	AuthTokenSecretRef *v1.SecretKeySelector `json:"authTokenSecretRef,omitempty" tf:"-"`

	// (All) Password to use for basic authentication.
	// +kubebuilder:validation:Optional
	BasicAuthPasswordSecretRef *v1.SecretKeySelector `json:"basicAuthPasswordSecretRef,omitempty" tf:"-"`

	// (Azure Monitor) Client secret for authentication.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (All) Password to use for authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Stackdriver) The service account key `private_key` to use to access the data source.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// (CloudWatch, Athena) The secret key to use to access the data source.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// (Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.
	// +kubebuilder:validation:Optional
	Sigv4AccessKeySecretRef *v1.SecretKeySelector `json:"sigv4AccessKeySecretRef,omitempty" tf:"-"`

	// (Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.
	// +kubebuilder:validation:Optional
	Sigv4SecretKeySecretRef *v1.SecretKeySelector `json:"sigv4SecretKeySecretRef,omitempty" tf:"-"`

	// (All) CA cert for out going requests.
	// +kubebuilder:validation:Optional
	TLSCACertSecretRef *v1.SecretKeySelector `json:"tlscaCertSecretRef,omitempty" tf:"-"`

	// (All) TLS Client cert for outgoing requests.
	// +kubebuilder:validation:Optional
	TLSClientCertSecretRef *v1.SecretKeySelector `json:"tlsClientCertSecretRef,omitempty" tf:"-"`

	// (All) TLS Client key for outgoing requests.
	// +kubebuilder:validation:Optional
	TLSClientKeySecretRef *v1.SecretKeySelector `json:"tlsClientKeySecretRef,omitempty" tf:"-"`
}

// DataSourceSpec defines the desired state of DataSource
type DataSourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSourceParameters `json:"forProvider"`
}

// DataSourceStatus defines the observed state of DataSource.
type DataSourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataSource is the Schema for the DataSources API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type DataSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSourceSpec   `json:"spec"`
	Status            DataSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSourceList contains a list of DataSources
type DataSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSource `json:"items"`
}

// Repository type metadata.
var (
	DataSource_Kind             = "DataSource"
	DataSource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSource_Kind}.String()
	DataSource_KindAPIVersion   = DataSource_Kind + "." + CRDGroupVersion.String()
	DataSource_GroupVersionKind = CRDGroupVersion.WithKind(DataSource_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSource{}, &DataSourceList{})
}
